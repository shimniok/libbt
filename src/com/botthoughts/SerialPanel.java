/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.botthoughts;

import java.util.logging.Level;
import java.util.logging.Logger;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author Michael Shimniok
 */
public class SerialPanel extends javax.swing.JPanel implements SerialPortEventListener {

    /**
     * Creates new form SerialPanel
     */
    public SerialPanel() {
        initComponents();
        portToggle.setEnabled(false);
        //getPorts();
    }
    
    private boolean isOpen() {
        return (serialPort != null);
    }
    
    private void disconnect() throws SerialPortException {
        //close serial port
        System.out.println("closing serial port.");
        if (serialPort != null) {
            try {
                serialPort.removeEventListener();
                serialPort.closePort();
                serialPort = null;
                System.out.println("closed serial port.");
            } catch (SerialPortException ex) {
                System.out.println("error "+ex.getMessage());
                Logger.getLogger(SerialPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    
    private void connect(String portName) throws SerialPortException {
        // TODO: make sure port is not currently in use
        if (serialPort == null) {
            serialPort = new SerialPort(portName);
            try {
                serialPort.openPort();//Open serial port
                serialPort.setParams(baudRate, 
                                     SerialPort.DATABITS_8,
                                     SerialPort.STOPBITS_1,
                                     SerialPort.PARITY_NONE);//Set params. Also you can set params by this string: serialPort.setParams(9600, 8, 1, 0);
                serialPort.setEventsMask(SerialPort.MASK_RXCHAR);
                serialPort.addEventListener(this);
            }
            catch (SerialPortException e) {
                System.out.println("Exception opening port: "+e.getMessage());
            }
        }
    }
    
    private void setBaud() {
        String newbaud = baudBox.getSelectedItem().toString();//get text from user
        //do simple check to make sure baudrate is valid
        baudRate=Integer.parseInt(newbaud);
    }
    
    
    /**
     * Gets a list of available serial ports and sticks those in the portBox JComboBox model
     */
    private String[] getPorts() {
        String[] myPortName = SerialPortList.getPortNames();

        return myPortName;
    }
    
    /**
     * when data is received from serial port, display the data on the terminal
     * 
     * @param event is the event passed into this handler
     */
    @Override
    public void serialEvent(SerialPortEvent event) {
        if (event.isRXCHAR()) {
            String buffer;

            try {
                buffer = serialPort.readString();
                if (myParser != null)
                    myParser.parseData(buffer);
            } catch (SerialPortException ex) {
                System.out.println("Error reading serial port "+ex.getMessage());
                Logger.getLogger(SerialPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void setHandler(Parser p) {
        myParser = p;
    }
    
    /* call this from the main JFrame when it is closing, ensures disconnect of serial stuff */
    public void handleClose() {
        try {
            disconnect();
        } catch (SerialPortException ex) {
            Logger.getLogger(SerialPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        baudBox = new javax.swing.JComboBox();
        portBox = new javax.swing.JComboBox();
        portToggle = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(400, 25));
        setMinimumSize(new java.awt.Dimension(400, 25));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(400, 25));
        setLayout(new java.awt.GridBagLayout());

        baudBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2400", "4800", "9600", "14400", "19200", "38400", "57600", "115200" }));
        baudBox.setSelectedIndex(7);
        baudBox.setMaximumSize(new java.awt.Dimension(90, 25));
        baudBox.setMinimumSize(new java.awt.Dimension(90, 25));
        baudBox.setNextFocusableComponent(portBox);
        baudBox.setPreferredSize(new java.awt.Dimension(90, 25));
        baudBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baudBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(baudBox, gridBagConstraints);

        portBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Port" }));
        portBox.setMaximumSize(new java.awt.Dimension(150, 25));
        portBox.setMinimumSize(new java.awt.Dimension(150, 25));
        portBox.setPreferredSize(new java.awt.Dimension(150, 25));
        portBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                portBoxPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        portBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(portBox, gridBagConstraints);

        portToggle.setText("Connect");
        portToggle.setMaximumSize(new java.awt.Dimension(110, 25));
        portToggle.setMinimumSize(new java.awt.Dimension(110, 25));
        portToggle.setPreferredSize(new java.awt.Dimension(110, 25));
        portToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portToggleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(portToggle, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void baudBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baudBoxActionPerformed
        setBaud();
    }//GEN-LAST:event_baudBoxActionPerformed

    private void portBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portBoxActionPerformed
        portName = (String) portBox.getSelectedItem();
        portToggle.setEnabled( portBox.getSelectedIndex() > 0);
    }//GEN-LAST:event_portBoxActionPerformed

    private void portBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_portBoxPopupMenuWillBecomeVisible
        String[] portList = getPorts(); // update the list of com ports dynamically
        portBox.removeAllItems();
        portBox.addItem("Select Port");
        for (String p : portList) {
            portBox.addItem(p);
            System.out.println(p);
        }
    }//GEN-LAST:event_portBoxPopupMenuWillBecomeVisible

    private void portToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portToggleActionPerformed
        try {
            if (isOpen()) {
                disconnect();
                portToggle.setText("Connect");
                portBox.setEnabled(true);
                baudBox.setEnabled(true);
            } else {
                connect(portName);
                portToggle.setText("Disconnect");
                portBox.setEnabled(false);
                baudBox.setEnabled(false);        
            }
        } catch ( SerialPortException e ) {
            System.out.println("error "+e.getMessage());
        }
        System.out.println("end of toggle function");
    }//GEN-LAST:event_portToggleActionPerformed

    private String portName;
    private SerialPort serialPort;
    private int baudRate=115200;
    private boolean open=false;
    private Parser myParser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox baudBox;
    private javax.swing.JComboBox portBox;
    private javax.swing.JButton portToggle;
    // End of variables declaration//GEN-END:variables
}
